-- Generated by Oracle SQL Developer Data Modeler 19.2.0.182.1216
--   at:        2019-09-16 18:14:37 CST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



CREATE TABLE agencia (
    id_agencia   INTEGER NOT NULL,
    direccion    VARCHAR2(150)
);

ALTER TABLE agencia ADD CONSTRAINT agencia_pk PRIMARY KEY ( id_agencia );

CREATE TABLE banco (
    id_banco    INTEGER NOT NULL,
    nombre      VARCHAR2(150) NOT NULL,
    direccion   VARCHAR2(150) NOT NULL
);

ALTER TABLE banco ADD CONSTRAINT banco_pk PRIMARY KEY ( id_banco );

CREATE TABLE cheque (
    id_cheque              INTEGER NOT NULL,
    fecha                  DATE NOT NULL,
    monto                  FLOAT NOT NULL,
    estado                 VARCHAR2(50),
    chequera_id_chequera   INTEGER NOT NULL,
    tipo_cheque_id_tipo    INTEGER NOT NULL
);

ALTER TABLE cheque ADD CONSTRAINT cheque_pk PRIMARY KEY ( id_cheque );

CREATE TABLE chequera (
    id_chequera        INTEGER NOT NULL,
    no_cheques         INTEGER NOT NULL,
    lote_id_lote       INTEGER NOT NULL,
    cuenta_id_cuenta   INTEGER NOT NULL
);

ALTER TABLE chequera ADD CONSTRAINT chequera_pk PRIMARY KEY ( id_chequera );

CREATE TABLE cliente (
    id_cliente             INTEGER NOT NULL,
    nombre                 VARCHAR2(150) NOT NULL,
    direccion              VARCHAR2(150) NOT NULL,
    nit                    VARCHAR2(10),
    telefono               INTEGER,
    correo                 VARCHAR2(25),
    tipo_cliente_id_tipo   INTEGER NOT NULL
);

ALTER TABLE cliente ADD CONSTRAINT cliente_pk PRIMARY KEY ( id_cliente );

CREATE TABLE cliente_cuenta (
    cliente_id_cliente   INTEGER NOT NULL,
    cuenta_id_cuenta     INTEGER NOT NULL
);

CREATE TABLE cuenta (
    id_cuenta                 INTEGER NOT NULL,
    estado                    VARCHAR2(50) NOT NULL,
    saldo                     FLOAT NOT NULL,
    estado_cuenta_id_estado   INTEGER NOT NULL
);

ALTER TABLE cuenta ADD CONSTRAINT cuenta_pk PRIMARY KEY ( id_cuenta );

CREATE TABLE empleado (
    id_empleado            INTEGER NOT NULL,
    nombre                 VARCHAR2(150) NOT NULL,
    direccion              VARCHAR2(150) NOT NULL,
    telefono               INTEGER,
    correo                 VARCHAR2(50),
    agencia_id_agencia     INTEGER NOT NULL,
    rol_id_rol             INTEGER NOT NULL,
    terminal_id_terminal   INTEGER NOT NULL
);

ALTER TABLE empleado ADD CONSTRAINT empleado_pk PRIMARY KEY ( id_empleado );

CREATE TABLE estado_cuenta (
    id_estado     INTEGER NOT NULL,
    estado        VARCHAR2(25) NOT NULL,
    descripcion   VARCHAR2(250)
);

ALTER TABLE estado_cuenta ADD CONSTRAINT estado_cuenta_pk PRIMARY KEY ( id_estado );

CREATE TABLE lote (
    id_lote             INTEGER NOT NULL,
    fecha               DATE NOT NULL,
    cantidad            FLOAT NOT NULL,
    total               FLOAT NOT NULL,
    tipo_lote_id_tipo   INTEGER NOT NULL,
    banco_id_banco      INTEGER NOT NULL
);

ALTER TABLE lote ADD CONSTRAINT lote_pk PRIMARY KEY ( id_lote );

CREATE TABLE rol (
    id_rol        INTEGER NOT NULL,
    nombre        VARCHAR2(25),
    descripcion   VARCHAR2(250)
);

ALTER TABLE rol ADD CONSTRAINT rol_pk PRIMARY KEY ( id_rol );

CREATE TABLE terminal (
    id_terminal   INTEGER NOT NULL,
    descripcion   VARCHAR2(250)
);

ALTER TABLE terminal ADD CONSTRAINT terminal_pk PRIMARY KEY ( id_terminal );

CREATE TABLE tipo_cheque (
    id_tipo       INTEGER NOT NULL,
    tipo          VARCHAR2(25) NOT NULL,
    descripcion   VARCHAR2(250)
);

ALTER TABLE tipo_cheque ADD CONSTRAINT tipo_cheque_pk PRIMARY KEY ( id_tipo );

CREATE TABLE tipo_cliente (
    id_tipo       INTEGER NOT NULL,
    tipo          VARCHAR2(25),
    descripcion   VARCHAR2(250)
);

ALTER TABLE tipo_cliente ADD CONSTRAINT tipo_cliente_pk PRIMARY KEY ( id_tipo );

CREATE TABLE tipo_lote (
    id_tipo       INTEGER NOT NULL,
    tipo          VARCHAR2(25),
    descripcion   VARCHAR2(250)
);

ALTER TABLE tipo_lote ADD CONSTRAINT tipo_lote_pk PRIMARY KEY ( id_tipo );

CREATE TABLE tipo_transaccion (
    id_transaccion   INTEGER NOT NULL,
    tipo             VARCHAR2(25) NOT NULL,
    descripcion      VARCHAR2(250)
);

ALTER TABLE tipo_transaccion ADD CONSTRAINT tipo_transaccion_pk PRIMARY KEY ( id_transaccion );

CREATE TABLE transaccion (
    id_transaccion                    INTEGER NOT NULL,
    fecha                             DATE NOT NULL,
    saldo_inicial                     FLOAT NOT NULL,
    saldo_final                       FLOAT NOT NULL,
    valor                             FLOAT NOT NULL,
    no_autorizacion                   INTEGER,
    no_rechazo                        INTEGER,
    razon_rechazo                     VARCHAR2(100),
    empleado_id_empleado              INTEGER NOT NULL,
    agencia_id_agencia                INTEGER NOT NULL,
    cuenta_id_cuenta                  INTEGER NOT NULL, 
--  ERROR: Column name length exceeds maximum allowed length(30) 
    tipo_transaccion_id_transaccion   INTEGER NOT NULL
);

ALTER TABLE transaccion ADD CONSTRAINT transaccion_pk PRIMARY KEY ( id_transaccion );

ALTER TABLE cheque
    ADD CONSTRAINT cheque_chequera_fk FOREIGN KEY ( chequera_id_chequera )
        REFERENCES chequera ( id_chequera );

ALTER TABLE cheque
    ADD CONSTRAINT cheque_tipo_cheque_fk FOREIGN KEY ( tipo_cheque_id_tipo )
        REFERENCES tipo_cheque ( id_tipo );

ALTER TABLE chequera
    ADD CONSTRAINT chequera_cuenta_fk FOREIGN KEY ( cuenta_id_cuenta )
        REFERENCES cuenta ( id_cuenta );

ALTER TABLE chequera
    ADD CONSTRAINT chequera_lote_fk FOREIGN KEY ( lote_id_lote )
        REFERENCES lote ( id_lote );

ALTER TABLE cliente_cuenta
    ADD CONSTRAINT cliente_cuenta_cliente_fk FOREIGN KEY ( cliente_id_cliente )
        REFERENCES cliente ( id_cliente );

ALTER TABLE cliente_cuenta
    ADD CONSTRAINT cliente_cuenta_cuenta_fk FOREIGN KEY ( cuenta_id_cuenta )
        REFERENCES cuenta ( id_cuenta );

ALTER TABLE cliente
    ADD CONSTRAINT cliente_tipo_cliente_fk FOREIGN KEY ( tipo_cliente_id_tipo )
        REFERENCES tipo_cliente ( id_tipo );

ALTER TABLE cuenta
    ADD CONSTRAINT cuenta_estado_cuenta_fk FOREIGN KEY ( estado_cuenta_id_estado )
        REFERENCES estado_cuenta ( id_estado );

ALTER TABLE empleado
    ADD CONSTRAINT empleado_agencia_fk FOREIGN KEY ( agencia_id_agencia )
        REFERENCES agencia ( id_agencia );

ALTER TABLE empleado
    ADD CONSTRAINT empleado_rol_fk FOREIGN KEY ( rol_id_rol )
        REFERENCES rol ( id_rol );

ALTER TABLE empleado
    ADD CONSTRAINT empleado_terminal_fk FOREIGN KEY ( terminal_id_terminal )
        REFERENCES terminal ( id_terminal );

ALTER TABLE lote
    ADD CONSTRAINT lote_banco_fk FOREIGN KEY ( banco_id_banco )
        REFERENCES banco ( id_banco );

ALTER TABLE lote
    ADD CONSTRAINT lote_tipo_lote_fk FOREIGN KEY ( tipo_lote_id_tipo )
        REFERENCES tipo_lote ( id_tipo );

ALTER TABLE transaccion
    ADD CONSTRAINT transaccion_agencia_fk FOREIGN KEY ( agencia_id_agencia )
        REFERENCES agencia ( id_agencia );

ALTER TABLE transaccion
    ADD CONSTRAINT transaccion_cuenta_fk FOREIGN KEY ( cuenta_id_cuenta )
        REFERENCES cuenta ( id_cuenta );

ALTER TABLE transaccion
    ADD CONSTRAINT transaccion_empleado_fk FOREIGN KEY ( empleado_id_empleado )
        REFERENCES empleado ( id_empleado );

--  ERROR: FK name length exceeds maximum allowed length(30) 
ALTER TABLE transaccion
    ADD CONSTRAINT transaccion_tipo_transaccion_fk FOREIGN KEY ( tipo_transaccion_id_transaccion )
        REFERENCES tipo_transaccion ( id_transaccion );

CREATE SEQUENCE agencia_id_agencia_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER agencia_id_agencia_trg BEFORE
    INSERT ON agencia
    FOR EACH ROW
    WHEN ( new.id_agencia IS NULL )
BEGIN
    :new.id_agencia := agencia_id_agencia_seq.nextval;
END;
/

CREATE SEQUENCE banco_id_banco_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER banco_id_banco_trg BEFORE
    INSERT ON banco
    FOR EACH ROW
    WHEN ( new.id_banco IS NULL )
BEGIN
    :new.id_banco := banco_id_banco_seq.nextval;
END;
/

CREATE SEQUENCE cheque_id_cheque_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cheque_id_cheque_trg BEFORE
    INSERT ON cheque
    FOR EACH ROW
    WHEN ( new.id_cheque IS NULL )
BEGIN
    :new.id_cheque := cheque_id_cheque_seq.nextval;
END;
/

CREATE SEQUENCE chequera_id_chequera_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER chequera_id_chequera_trg BEFORE
    INSERT ON chequera
    FOR EACH ROW
    WHEN ( new.id_chequera IS NULL )
BEGIN
    :new.id_chequera := chequera_id_chequera_seq.nextval;
END;
/

CREATE SEQUENCE cliente_id_cliente_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cliente_id_cliente_trg BEFORE
    INSERT ON cliente
    FOR EACH ROW
    WHEN ( new.id_cliente IS NULL )
BEGIN
    :new.id_cliente := cliente_id_cliente_seq.nextval;
END;
/

CREATE SEQUENCE cuenta_id_cuenta_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cuenta_id_cuenta_trg BEFORE
    INSERT ON cuenta
    FOR EACH ROW
    WHEN ( new.id_cuenta IS NULL )
BEGIN
    :new.id_cuenta := cuenta_id_cuenta_seq.nextval;
END;
/

CREATE SEQUENCE empleado_id_empleado_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER empleado_id_empleado_trg BEFORE
    INSERT ON empleado
    FOR EACH ROW
    WHEN ( new.id_empleado IS NULL )
BEGIN
    :new.id_empleado := empleado_id_empleado_seq.nextval;
END;
/

CREATE SEQUENCE lote_id_lote_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER lote_id_lote_trg BEFORE
    INSERT ON lote
    FOR EACH ROW
    WHEN ( new.id_lote IS NULL )
BEGIN
    :new.id_lote := lote_id_lote_seq.nextval;
END;
/

CREATE SEQUENCE rol_id_rol_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER rol_id_rol_trg BEFORE
    INSERT ON rol
    FOR EACH ROW
    WHEN ( new.id_rol IS NULL )
BEGIN
    :new.id_rol := rol_id_rol_seq.nextval;
END;
/

CREATE SEQUENCE terminal_id_terminal_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER terminal_id_terminal_trg BEFORE
    INSERT ON terminal
    FOR EACH ROW
    WHEN ( new.id_terminal IS NULL )
BEGIN
    :new.id_terminal := terminal_id_terminal_seq.nextval;
END;
/

CREATE SEQUENCE tipo_cheque_id_tipo_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER tipo_cheque_id_tipo_trg BEFORE
    INSERT ON tipo_cheque
    FOR EACH ROW
    WHEN ( new.id_tipo IS NULL )
BEGIN
    :new.id_tipo := tipo_cheque_id_tipo_seq.nextval;
END;
/

CREATE SEQUENCE tipo_cliente_id_tipo_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER tipo_cliente_id_tipo_trg BEFORE
    INSERT ON tipo_cliente
    FOR EACH ROW
    WHEN ( new.id_tipo IS NULL )
BEGIN
    :new.id_tipo := tipo_cliente_id_tipo_seq.nextval;
END;
/

CREATE SEQUENCE tipo_lote_id_tipo_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER tipo_lote_id_tipo_trg BEFORE
    INSERT ON tipo_lote
    FOR EACH ROW
    WHEN ( new.id_tipo IS NULL )
BEGIN
    :new.id_tipo := tipo_lote_id_tipo_seq.nextval;
END;
/

CREATE SEQUENCE transaccion_id_transaccion_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER transaccion_id_transaccion_trg BEFORE
    INSERT ON transaccion
    FOR EACH ROW
    WHEN ( new.id_transaccion IS NULL )
BEGIN
    :new.id_transaccion := transaccion_id_transaccion_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            17
-- CREATE INDEX                             0
-- ALTER TABLE                             33
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          14
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                         14
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   2
-- WARNINGS                                 0
